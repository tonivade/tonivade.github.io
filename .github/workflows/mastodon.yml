name: Post to Mastodon

on:
  push:
    branches:
      - master

jobs:
  toot:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Necesario para comparar cambios entre commits

    - name: Detect new post
      id: detect
      run: |
        # Buscar en los cambios del Ãºltimo push archivos aÃ±adidos en _posts/
        new_post=$(git diff --name-status HEAD~1 HEAD | grep "^A" | awk '{print $2}' | grep "^_posts/.*\.markdown" || true)

        if [ -z "$new_post" ]; then
          echo "No hay nuevos posts. Saltando publicaciÃ³n."
          echo "publish=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Nuevo post detectado: $new_post"
        echo "file=$new_post" >> $GITHUB_OUTPUT
        echo "publish=true" >> $GITHUB_OUTPUT

    - name: Get post data
      if: steps.detect.outputs.publish == 'true'
      id: get_post
      run: |
        file="${{ steps.detect.outputs.file }}"

        # Extraer tÃ­tulo del front matter
        title=$(grep -m 1 "^title:" "$file" | sed 's/^title:[ ]*//;s/^"//;s/"$//')

        # Extraer fecha y slug del nombre del archivo
        filename=$(basename "$file" .markdown)
        date_part=$(echo $filename | cut -d'-' -f1-3 | tr '-' '/')
        slug=$(echo $filename | cut -d'-' -f4-)

        # Construir URL final
        url="https://blog.tonivade.es/$date_part/$slug.html"

        echo "post_title=$title" >> $GITHUB_OUTPUT
        echo "post_url=$url" >> $GITHUB_OUTPUT

    - name: Send toot to Mastodon
      if: steps.detect.outputs.publish == 'true'
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.MASTODON_TOKEN }}" \
          -F "status=ðŸ“¢ Nuevo post: ${{ steps.get_post.outputs.post_title }} ${{ steps.get_post.outputs.post_url }}" \
          "${{ secrets.MASTODON_INSTANCE }}/api/v1/statuses"
